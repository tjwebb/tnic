#summary Describes how tnic is implemented.

_Incomplete_

= Intro =
The mechanics that actually implement the tnic framework are straightforward.
Any developer who wishes to contribute to the core of tnic should peruse this
document and be sure to understand _how_ everything happens underneath. This
document may additionally help developers better understand how their code is
run.

=== Prerequisites ===

1. The reader should have a firm understanding of Java and Javascript.

2. Understand the concepts behind tuple spaces and other methods of implementing
shared memory on distributed systems.
<br/>[http://en.wikipedia.org/wiki/Distributed_shared_memory]
<br/>[http://en.wikipedia.org/wiki/Tuple_space]

3. tnic uses the `javax.script` package for compilation and execution of Javascript
modules, as well as Mozilla Rhino. Be familiar with these technologies.
<br/>[http://download.oracle.com/javase/6/docs/technotes/guides/scripting/programmer_guide/]
<br/>[http://www.mozilla.org/rhino/]

= Compiling and Initiating Execution of a TNIC Program =

== Step 1: Assemble Package Tree ==

== Step 2: Compile Sources==

== Step 3: Bootstrap ==

== Step 4: Invoke `init()` to store Guard Templates and `space` Object ==

== Step 5: Invoke `supervisor()` to begin program execution ==

= The Lifecycle of Program Execution =
